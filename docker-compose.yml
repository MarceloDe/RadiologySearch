version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: radiology-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: radiology123
      MONGO_INITDB_DATABASE: radiology_ai_langchain
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - radiology-network

  # Redis for Caching
  redis:
    image: redis:7.2-alpine
    container_name: radiology-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - radiology-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: radiology-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://admin:radiology123@mongodb:27017/radiology_ai_langchain?authSource=admin
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - /app/venv  # Exclude virtual environment from volume mount
    networks:
      - radiology-network
    command: >
      sh -c "
        echo 'Waiting for MongoDB...' &&
        sleep 10 &&
        echo 'Starting Radiology AI Backend...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --timeout-keep-alive 180 --timeout-graceful-shutdown 30
      "

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: radiology-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_LANGSMITH_PROJECT=radiology-ai-system
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Exclude node_modules from volume mount
    depends_on:
      - backend
    networks:
      - radiology-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: radiology-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - radiology-network

  # MongoDB Express (Database Admin UI)
  mongo-express:
    image: mongo-express:latest
    container_name: radiology-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: radiology123
      ME_CONFIG_MONGODB_URL: mongodb://admin:radiology123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      - mongodb
    networks:
      - radiology-network

  # Redis Commander (Redis Admin UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: radiology-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - radiology-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  radiology-network:
    driver: bridge

